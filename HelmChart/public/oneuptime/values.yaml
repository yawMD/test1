##################################################################################  
## Important: If you're implenting this in the enterprise environment, this should always be `false`. 
## This is for OneUptime SaaS service. This will deploy all the SaaS env vars
################################################################################## 
saas:
  exposeInitScriptContainer: false
  isSaasService: false
  stripe: 
    publicKey: #Stripe public and private key
    privateKey:
    slackWebhook:
  airtable: 
    key: #Airtbale key to store leads. 
    baseId: 
  amplitude: 
    key: #Amplitude for tracking. 
  twitter:
    bearertoken: # Twitter Bearer Token. 
  licensing:
    airtable: # Airtable for validating licenses. 
      key: 
      baseId: 
    tokenSecret: # Encrypting lisense with tokens to send them to clients. 

###################################################################################

statusPage: 
  hosts:
    host1: 
      host: 
      tls:
        enabled: false
        crt: 
        key:
  cert: # certificate for a custom domain
  key: # private key for a custom domain

##################################################################################  
## Important: OneUptime Values. More information in the Readme.md 
################################################################################## 
oneuptime:
  admin: 
    email: 
    password: 
  hosts:
    host1: 
      host: 
      tls:
        enabled: false
        crt: 
        key: 
  licensingUrl: https://oneuptime.com/license

###################################################################################

httpTestServer: 
    hosts:
      host1: 
        host: 
        tls:
          enabled: false
          crt: 
          key: 

##################################################################################  
## Important: Probe Values. More information in the Readme.md 
################################################################################## 

probes:
  probe1: 
    name: Probe 1
    key: sample-key
  probe2: 
    name: Probe 2
    key: sample-key

##################################################################################  
## Important: RateLimitter Values. More information in the Readme.md 
################################################################################## 

rateLimitter:
  enabled: false
  requestLimit: 5000
  requestLimitTimePeriodInMS: 216000


## OneUptime official image version on Docker Hub
## ref: https://hub.docker.com/u/oneuptime
##

image:
  registry: docker.io
  repository: oneuptime
  tag: latest
  pullPolicy: Always
  restartPolicy: Always

replicaCount: 1

##################################################################################
## IMPORTANT: 
## Values for Subcharts
##

redis: 
  redisPort: 6379
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: latest
    pullPolicy: Always
  usePassword: false
  auth:
    enabled: false
  persistence:
    enabled: true
    mountPath: /bitnami/redis
    size: 20Gi

mongo:
  oneuptimeDbUsername: oneuptime
  oneuptimeDbPassword: password
  databaseName: oneuptimedb
  rootUsername: root
  rootPassword: root

## Service Configuration
## For minikube, set service.type to NodePort, elsewhere use LoadBalancer
##

## Service Configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer
##
nginx-ingress-controller:
  defaultBackend:
    enabled: false
  service:
    type: LoadBalancer
  proxySetHeaders:
    X-Forwarded-For: $http_x_forwarded_for
    X-Real-Ip: $http_x_forwarded_for
  publishService:
    enabled: true
  config:
    log-format-upstream: '$remote_addr - $http_cf_connecting_ip - $http_x_forwarded_for - $request_id - [$proxy_add_x_forwarded_for] - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status'
    proxy-protocol: "true"
    real-ip-header: "X-Forwarded-For"


  ##################################################################################

haraka:
  fromEmail:
  fromName: 
  user: 
  password:
  domain:
  # This should be base64 of your private key
  dkimPrivateKey:
  tlsCert:
  tlsKey:

host: 
  backendPort: 3002
  fetchResourcesPort: 3400
  dataIngestorPort: 3200
  realtimePort: 3300
  homePort: 1444
  licensingPort: 3004
  statusPageHttpPort: 3006
  statusPageHttpsPort: 3007
  dashboardPort: 3000
  accountsPort: 3003
  helmChartPort: 3423
  apiDocsPort: 1445
  initScriptPort: 1447
  # if port 25 is avaialble and accessible
  # then we can use it as default port
  harakaPort: 2525
  httpTestServerPort: 3010
  adminDashboardPort: 3100
  backendServicePort: 80
  dataIngestorServicePort: 80
  realtimeServicePort: 80
  fetchResourcesServicePort: 80
  homeServicePort: 80
  apiDocsServicePort: 80
  statusPageHttpServicePort: 80
  statusPageHttpsServicePort: 443
  dashboardServicePort: 80
  accountsServicePort: 80
  adminDashboardServicePort: 80
  backendNodePort: 80
  statusPageNodePort: 80
  dashboardNodePort: 80
  accountsNodePort: 80
  adminDashboardNodePort: 80
  licensingServicePort: 80
  helmChartServicePort: 80
  httpTestServerServicePort: 80
  initScriptServicePort: 80
  harakaServicePort: 2525
  scriptRunnerPort: 3009
  scripRunnerServicePort: 80
  applicationScannerPort: 3005
  applicationScannerServicePort: 80
  containerScannerPort: 3055
  containerScannerServicePort: 80
  lighthouseRunnerPort: 3015
  lighthouseRunnerServicePort: 80

isThirdPartyBilling: false
isRunningOnGCPMarketplace: false
isTesting: false

# Encryption Key
encryptionKey: ThisEncryptionKeyLengthIs32Size.

# If you disable sign up, then you need to specify 
# oneuptime.admin.email and oneuptime.admin.password values for the admin account. 
disableSignup: false

# What protocol is backend running on. Takes in values like 'http:' or 'https:'
backendProtocol: 

# Status page domain to add to CNAME to work with custom domains
# Status page CNAME to display whcih customers will set on the cusom domain tab of status page.
statusPageDomain:

# Push notificaitons. 
# Generate public and pivate key for push notifications. 
# These are just the test keys. 
# You can generate them by: 
# First install the web-push npm package using npm install web-push -g, then run web-push generate-vapid-keys

pushNotification:
    publicKey: "BD1kb-OchZlXr32bmwpjhoxp_cq-aqK4dWXRDkC5m6Hd9_cvMOUw_bXRFR3pJFGzpEdjQUk5SDdYaXvb7xd-1Dg"
    privateKey: "WdFZTeXkuoxpsO_KNOtXvhDUc_Ae1rb-WjPv6AVexA4"
    url: "https://oneuptime-test.com"
 

autoScaler: 
  enabled: false
  averageCpuUtilization: 50
  minReplicas: 1
  maxReplicas: 1

nodeEnv: production

applicationScanner:
  name: US
  key: b6ETg5EdrIEtdjgit7r3
containerScanner:
  name: US
  key: s9KOOlCVyly0XykZVjDe

logstashHost: 54.153.39.163
logstashPort: 1514